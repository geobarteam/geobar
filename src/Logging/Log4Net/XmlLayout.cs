using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Xml;
using log4net.Core;
using log4net.Layout;
using log4net.Util;

namespace GoSimple.Logging.Log4Net
{
    /// <summary>
    /// Layout that formats the log events as XML elements.
    /// </summary>
    /// <remarks>
    /// <para>
    /// The output of the <see cref="XmlLayout" /> consists of a series of 
    /// log4net:event elements. It does not output a complete well-formed XML 
    /// file. The output is designed to be included as an <em>external entity</em>
    /// in a separate file to form a correct XML file.
    /// </para>
    /// <para>
    /// For example, if <c>abc</c> is the name of the file where
    /// the <see cref="XmlLayout" /> output goes, then a well-formed XML file would 
    /// be:
    /// </para>
    /// <code lang="XML">
    /// &lt;?xml version="1.0" ?&gt;
    /// 
    /// &lt;!DOCTYPE log4net:events SYSTEM "log4net-events.dtd" [&lt;!ENTITY data SYSTEM "abc"&gt;]&gt;
    ///
    /// &lt;log4net:events version="1.2" xmlns:log4net="http://logging.apache.org/log4net/schemas/log4net-events-1.2&gt;
    ///     &amp;data;
    /// &lt;/log4net:events&gt;
    /// </code>
    /// <para>
    /// This approach enforces the independence of the <see cref="XmlLayout" /> 
    /// and the appender where it is embedded.
    /// </para>
    /// <para>
    /// The <c>version</c> attribute helps components to correctly
    /// interpret output generated by <see cref="XmlLayout" />. The value of 
    /// this attribute should be "1.2" for release 1.2 and later.
    /// </para>
    /// <para>
    /// Alternatively the <c>Header</c> and <c>Footer</c> properties can be
    /// configured to output the correct XML header, open tag and close tag.
    /// When setting the <c>Header</c> and <c>Footer</c> properties it is essential
    /// that the underlying data store not be appendable otherwise the data
    /// will become invalid XML.
    /// </para>
    /// </remarks>
    public class XmlLayout : XmlLayoutBase
    {
        #region Public Instance Constructors

        /// <summary>
        /// Default constructor (required by Log4Net)
        /// </summary>
        public XmlLayout() { }

        /// <summary>
        /// Constructs an XmlLayout.
        /// </summary>
        /// <remarks>
        /// <para>
        /// The <b>LocationInfo</b> option takes a boolean value. By
        /// default, it is set to false which means there will be no location
        /// information output by this layout. If the the option is set to
        /// true, then the file name and line number of the statement
        /// at the origin of the log statement will be output. 
        /// </para>
        /// <para>
        /// If you are embedding this layout within an SmtpAppender
        /// then make sure to set the <b>LocationInfo</b> option of that 
        /// appender as well.
        /// </para>
        /// </remarks>
        public XmlLayout(bool locationInfo)
            : base(locationInfo)
        {
        }
        #endregion Public Instance Constructors

        #region Override implementation of XMLLayoutBase

        /// <summary>
        /// Does the actual writing of the XML.
        /// </summary>
        /// <param name="writer">The writer to use to output the event to.</param>
        /// <param name="loggingEvent">The event to write.</param>
        /// <remarks>
        /// <para>
        /// Override the base class <see cref="XmlLayoutBase.FormatXml"/> method
        /// to write the <see cref="LoggingEvent"/> to the <see cref="XmlWriter"/>.
        /// </para>
        /// </remarks>
        override protected void FormatXml(XmlWriter writer, LoggingEvent loggingEvent)
        {
            writer.WriteStartElement(m_elmEvent);
            writer.WriteAttributeString(ATTR_LOGGER, loggingEvent.LoggerName);
            //writer.WriteAttributeString(ATTR_TIMESTAMP, XmlConvert.ToString(loggingEvent.TimeStamp, XmlDateTimeSerializationMode.Local));
            writer.WriteAttributeString(ATTR_TIMESTAMP, XmlConvert.ToString(loggingEvent.TimeStamp, XmlDateTimeSerializationMode.Utc));
            writer.WriteAttributeString(ATTR_LEVEL, loggingEvent.Level.DisplayName);
            writer.WriteAttributeString(ATTR_THREAD, loggingEvent.ThreadName);
            writer.WriteAttributeString(ATTR_THREADID, Thread.CurrentThread.GetHashCode().ToString());

            if (loggingEvent.Domain != null && loggingEvent.Domain.Length > 0)
            {
                writer.WriteAttributeString(ATTR_DOMAIN, loggingEvent.Domain);
            }
            if (loggingEvent.Identity != null && loggingEvent.Identity.Length > 0)
            {
                writer.WriteAttributeString(ATTR_IDENTITY, loggingEvent.Identity);
            }
            if (loggingEvent.UserName != null && loggingEvent.UserName.Length > 0)
            {
                writer.WriteAttributeString(ATTR_USERNAME, loggingEvent.UserName);
            }

            // Append the message text
            writer.WriteStartElement(m_elmMessage);
            Transform.WriteEscapedXmlString(writer, loggingEvent.RenderedMessage, string.Empty);
            writer.WriteEndElement();

            PropertiesDictionary properties = loggingEvent.GetProperties();

            // Append the properties text
            if (properties.Count > 0)
            {
                writer.WriteStartElement(m_elmGlobalProperties);
                foreach (System.Collections.DictionaryEntry entry in properties)
                {
                    writer.WriteStartElement(m_elmData);
                    writer.WriteAttributeString(ATTR_NAME, (string)entry.Key);

                    // Use an ObjectRenderer to convert the object to a string
                    string valueStr = loggingEvent.Repository.RendererMap.FindAndRender(entry.Value);
                    writer.WriteAttributeString(ATTR_VALUE, valueStr);

                    writer.WriteEndElement();
                }
                writer.WriteEndElement();
            }

            string exceptionStr = loggingEvent.GetExceptionString();
            if (exceptionStr != null && exceptionStr.Length > 0)
            {
                // Append the stack trace line
                writer.WriteStartElement(m_elmException);
                Transform.WriteEscapedXmlString(writer, exceptionStr, string.Empty);
                writer.WriteEndElement();
            }

            if (LocationInfo)
            {
                LocationInfo locationInfo = loggingEvent.LocationInformation;

                writer.WriteStartElement(m_elmLocation);
                writer.WriteAttributeString(ATTR_CLASS, locationInfo.ClassName);
                writer.WriteAttributeString(ATTR_METHOD, locationInfo.MethodName);
                writer.WriteAttributeString(ATTR_FILE, locationInfo.FileName);
                writer.WriteAttributeString(ATTR_LINE, locationInfo.LineNumber);
                writer.WriteEndElement();
            }

            writer.WriteEndElement();
        }

        #endregion Override implementation of XMLLayoutBase

        #region Private Instance Fields

        private string m_elmEvent = ELM_EVENT;
        private string m_elmMessage = ELM_MESSAGE;
        private string m_elmData = ELM_DATA;
        private string m_elmGlobalProperties = ELM_GLOBAL_PROPERTIES;
        private string m_elmException = ELM_EXCEPTION;
        private string m_elmLocation = ELM_LOCATION;

        #endregion Private Instance Fields

        #region Private Static Fields

        private const string ELM_EVENT = "event";
        private const string ELM_MESSAGE = "message";
        private const string ELM_GLOBAL_PROPERTIES = "global-properties";
        private const string ELM_DATA = "data";
        private const string ELM_EXCEPTION = "exception";
        private const string ELM_LOCATION = "locationInfo";

        private const string ATTR_LOGGER = "logger";
        private const string ATTR_TIMESTAMP = "timestamp";
        private const string ATTR_LEVEL = "level";
        private const string ATTR_THREAD = "thread";
        private const string ATTR_DOMAIN = "domain";
        private const string ATTR_IDENTITY = "identity";
        private const string ATTR_USERNAME = "username";
        private const string ATTR_CLASS = "class";
        private const string ATTR_METHOD = "method";
        private const string ATTR_FILE = "file";
        private const string ATTR_LINE = "line";
        private const string ATTR_NAME = "name";
        private const string ATTR_VALUE = "value";
        private const string ATTR_THREADID = "threadId";

        #endregion Private Static Fields
    }
}
